import themes from './themes';
import Team from './Team';
import { generateTeam } from './generators';
import PositionedCharacter from './PositionedCharacter';
import { getArrayOfPositions, isStepPossible, isAttackPossible } from './utils';
import GamePlay from './GamePlay';
import cursors from './cursors';
import GameState from './GameState';
import Chatacter from './Character';

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
  }

  init() {
    // TODO: add event listeners to gamePlay events
    // TODO: load saved stated from stateService
    this.currentLevel = 1; // —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    this.scores = 0; // –æ—á–∫–∏
    this.record = 0; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ (—Ä–µ–∫–æ—Ä–¥)
    const userTeam = generateTeam(new Team().userTeam, 1, 2); // –∫–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞ (–±–µ–∑ –ø–æ–∑–∏—Ü–∏–π)
    const computerTeam = generateTeam(new Team().computerTeam, 1, 2); // –∫–æ–º–∞–Ω–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (–±–µ–∑ –ø–æ–∑–∏—Ü–∏–π)
    // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
    this.userTeamWithPositions = this.generateTeamWithPositions(
      userTeam,
      getArrayOfPositions('user', this.gamePlay.boardSize)
    );
    // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
    this.computerTeamWithPositions = this.generateTeamWithPositions(
      computerTeam,
      getArrayOfPositions('computer', this.gamePlay.boardSize)
    );
    // –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –≤ –æ–¥–∏–Ω –º–∞—Å–∏–≤
    this.players = [...this.userTeamWithPositions, ...this.computerTeamWithPositions];
    this.isUserTurn = true; // –±—É–ª–µ–≤–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞
    this.stepIsPossible = false; // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è
    this.attackIsPossible = false; // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏

    this.gamePlay.drawUi(themes[this.currentLevel - 1]); // –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–µ–º—É
    this.gamePlay.redrawPositions(this.players); // –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

    // –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è, –æ—á–∫–æ–≤ –∏ —Ä–µ–∫–æ—Ä–¥–∞
    const levelElement = document.getElementById('level');
    const scoresElement = document.getElementById('scores');
    const recordElement = document.getElementById('record');
    levelElement.textContent = this.currentLevel;
    scoresElement.textContent = this.scores;
    recordElement.textContent = this.record;

    this.onCellClickSubscriber();
    this.onCellEnterSubscriber();
    this.onCellLeaveSubscriber();
    this.onNewGameSubscriber();
    this.onSaveGameSubscriber();
    this.onLoadGameSubscriber();
  }

  // —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤ –∏ –º–∞—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –±—ä–µ–∫—Ç–æ–≤ —Å –∏–≥—Ä–æ–∫–∞–º–∏ –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏—è–º–∏
  generateTeamWithPositions(team, arrayOfPositions) {
    const array = arrayOfPositions;
    return team.reduce((acc, prev) => {
      const position = array[Math.floor(Math.random() * (arrayOfPositions.length - 1))];
      acc.push(new PositionedCharacter(prev, position));
      array.splice(array.indexOf(position), 1);
      return acc;
    }, []);
  }

  onCellClick(index) {
    // TODO: react to click
    // –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —è—á–µ–π–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∫–ª–∏–∫–Ω—É–ª–∏
    const currentCharacter = this.players.find((el) => el.position === index);
    // –µ—Å–ª–∏ –≤ —è—á–µ–π–∫–µ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂ –ò –æ–Ω –∏–≥—Ä–æ–∫, —Ç–æ —É–±–∏—Ä–∞–π –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è, –≤—ã–¥–µ–ª—è–π –µ–≥–æ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π –µ–≥–æ –≤ this.selectChar
    if (currentCharacter && currentCharacter.character.isPlayer) {
      this.players.forEach((el) => this.gamePlay.deselectCell(el.position));
      this.gamePlay.selectCell(index);
      this.selectChar = currentCharacter;
    }
    // –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ò –≤ —è—á–µ–π–∫–µ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂ –ò –æ–Ω –Ω–µ –∏–≥—Ä–æ–∫, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–π –æ—à–∏–±–∫—É, —á—Ç–æ –µ–≥–æ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ–ª—å–∑—è
    if (!this.selectChar && currentCharacter && !currentCharacter.character.isPlayer) {
      GamePlay.showError('This is not a playable character');
      return;
    }
    // –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ò –º—ã –∫–ª–∏–∫–∞–µ–º –Ω–∞ –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–π, –º–æ–∂–Ω–æ –ª–∏ —Ç—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å. –ï—Å–ª–∏ –¥–∞, —Ç–æ —Ö–æ–¥–∏
    if (this.selectChar && !currentCharacter && this.selectChar.position !== index) {
      if (this.stepIsPossible) {
        this.makeStep(this.selectChar, index);
      }
    }
    // –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ò –º—ã –∫–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–π, –º–æ–∂–Ω–æ –ª–∏ –∞—Ç–∞–∫–æ–≤–∞—Ç—å. –ï—Å–ª–∏ –¥–∞, —Ç–æ –∞—Ç–∞–∫—É–π
    if (this.selectChar && currentCharacter && this.selectChar.position !== index) {
      if (this.attackIsPossible) {
        this.attackTheEnemy(this.selectChar, currentCharacter);
      }
    }
  }

  onCellEnter(index) {
    // TODO: react to mouse enter
    // –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —è—á–µ–π–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–≤–µ–ª–∏
    const currentCharacter = this.players.find((el) => el.position === index);
    // –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂, —Ç–æ —É–±–∏—Ä–∞–π –≤—ã–¥–µ–ª–µ–Ω–∏—è —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    if (this.selectChar) {
      this.gamePlay.cells.forEach((cell) => {
        if (this.gamePlay.cells.indexOf(cell) !== this.selectChar.position) {
          this.gamePlay.deselectCell(this.gamePlay.cells.indexOf(cell));
        }
      });
    }
    // –µ—Å–ª–∏ –Ω–∞–≤–æ–¥–∏–º –Ω–∞ —è—á–µ–π–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–π –µ–≥–æ —Å—Ç–∞—Ç—ã
    if (currentCharacter) {
      const { level, attack, defence, health } = currentCharacter.character;
      this.gamePlay.showCellTooltip(`üéñ${level} ‚öî${attack} üõ°${defence} ‚ù§${health}`, index);
      this.gamePlay.setCursor(cursors.pointer);
    } else {
      this.gamePlay.setCursor(cursors.auto);
    }
    // –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ò –Ω–∞–≤–æ–¥–∏–º –Ω–∞ –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É, —Ç–æ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∑–µ–ª–µ–Ω—ã–º, –µ—Å–ª–∏ —Ç—É–¥–∞ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å
    if (!currentCharacter && this.selectChar) {
      this.stepIsPossible = isStepPossible(
        this.selectChar.position,
        index,
        this.selectChar.character.step,
        this.gamePlay.boardSize
      ).success;
      if (this.stepIsPossible) {
        this.gamePlay.selectCell(index, 'green');
        this.gamePlay.setCursor(cursors.pointer);
      }
    }
    // –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ò –Ω–∞–≤–æ–¥–∏–º –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–π, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–Ω –≤ –∑–æ–Ω–µ –∞—Ç–∞–∫–∏.
    // –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–π –µ–≥–æ –∫—Ä–∞—Å–Ω—ã–º –∏ –º–µ–Ω—è–π –∫—É—Ä—Å–æ—Ä –Ω–∞ crosshair. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –º–µ–Ω—è–π –∫—É—Ä—Å–æ—Ä –Ω–∞ notallowed
    if (this.selectChar && currentCharacter && !currentCharacter.character.isPlayer) {
      this.attackIsPossible = isAttackPossible(
        this.selectChar.position,
        currentCharacter.position,
        this.selectChar.character.range,
        this.gamePlay.boardSize
      );
      if (this.attackIsPossible) {
        this.gamePlay.selectCell(index, 'red');
        this.gamePlay.setCursor(cursors.crosshair);
      } else {
        this.gamePlay.setCursor(cursors.notallowed);
      }
    }
  }

  onCellLeave(index) {
    // TODO: react to mouse leave
    this.gamePlay.hideCellTooltip(index);
  }

  // —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∏ –∑–∞—â–∏—â–∞—é—â–µ–≥–æ—Å—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  attackTheEnemy(attacker, defender) {
    const enemy = defender;
    const attackPoints = Math.max(
      attacker.character.attack - enemy.character.defence,
      attacker.character.attack * 0.1
    ).toFixed(0);
    // —É–¥–∞–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –∞—Ç–∞–∫—É–µ–º, –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∏–≥—Ä–æ–∫–æ–≤, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –µ–º—É –•–ü —Å —É—á–µ—Ç–æ–º –¥–∞–º–∞–≥–∞ –∏,
    // –µ—Å–ª–∏ –•–ü>0, —Ç–æ —Å–Ω–æ–≤–∞ –ø—É—à–∏–º –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤, –∑–∞—Ç–µ–º –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞.
    // –µ—Å–ª–∏ –•–ü<=0, –∑–Ω–∞—á–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–±–∏—Ç, –Ω–µ –ø—É—à–∏–º –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤, –∞ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞
    this.players = [...this.players].filter((el) => el !== enemy);
    enemy.character.damage(attackPoints);
    if (enemy.character.health > 0) {
      this.players.push(enemy);
      this.gamePlay.showDamage(enemy.position, attackPoints).then(() => this.endOfTurn()); // –∞–Ω–∏–º–∞—Ü–∏—è –¥–∞–º–∞–≥–∞
    } else {
      this.endOfTurn();
    }
  }

  // –∫–æ–Ω–µ—Ü —Ö–æ–¥–∞
  endOfTurn() {
    // –æ—á–∏—â–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –æ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–π ))
    this.gamePlay.cells.forEach((cell) =>
      this.gamePlay.deselectCell(this.gamePlay.cells.indexOf(cell))
    );
    // –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ò –µ–≥–æ –∑–¥–æ—Ä–æ–≤—å–µ > 0, —Ç–æ –æ–±–Ω—É–ª—è–µ–º –µ–≥–æ
    if (this.selectChar && this.selectChar.character.health <= 0) {
      this.selectChar = null;
    }
    // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–∞. –ï—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π, —Ç–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    const arrayOfEnemies = [...this.players].filter((char) => !char.character.isPlayer);
    if (arrayOfEnemies.length === 0) {
      this.nextLevel();
      return;
    }
    // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä–æ–∫–∞. –ï—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π, —Ç–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
    const arrayOfUser = [...this.players].filter((char) => char.character.isPlayer);
    if (arrayOfUser.length === 0) {
      this.endOfGame();
      GamePlay.showMessage('You lose...');
      return;
    }
    // –æ–±–Ω—É–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    this.gamePlay.setCursor(cursors.auto);
    this.gamePlay.redrawPositions(this.players);
    // –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫, —Ä–∏—Å—É–µ–º —É –Ω–µ–≥–æ –∂–µ–ª—Ç—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
    if (this.selectChar) {
      this.gamePlay.selectCell(this.selectChar.position);
    }
    // –º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    if (this.isUserTurn) {
      this.isUserTurn = false;
      this.computerTurn();
    } else {
      this.isUserTurn = true;
    }
  }

  // —Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
  computerTurn() {
    // —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ 2 –∫–æ–º–∞–Ω–¥—ã
    const arrayOfEnemies = [];
    const arrayOfUser = [];
    this.players.forEach((el) => {
      if (!el.character.isPlayer) {
        arrayOfEnemies.push(el);
      } else {
        arrayOfUser.push(el);
      }
    });

    // –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –ø—É—Å—Ç–æ–π, –≤—ã—Ö–æ–¥–∏ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    if (arrayOfEnemies.length === 0) {
      return;
    }

    // –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ –ø–æ–ª–µ –∞—Ç–∞–∫–∏ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–≥—Ä–æ–∫–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤, –≥–¥–µ –∫–∞–∂–¥–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –ø—Ä–∏–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const canAttackEnemies = arrayOfEnemies.reduce((acc, prev) => {
      const arrayOfDefenders = [];
      arrayOfUser.forEach((userChar, index) => {
        const canAttack = isAttackPossible(
          prev.position,
          userChar.position,
          prev.character.range,
          this.gamePlay.boardSize
        );
        if (canAttack) {
          arrayOfDefenders.push(arrayOfUser[index]);
        }
      });
      if (arrayOfDefenders.length > 0) {
        acc.push({
          attacker: prev,
          defenders: arrayOfDefenders,
        });
      }
      return acc;
    }, []);

    // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å. –ï—Å–ª–∏ —Ç–∞–∫–æ–π –µ—Å—Ç—å, —Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º –∞—Ç–∞–∫–æ–≤–∞–Ω –∏ –∞—Ç–∞–∫—É–µ–º
    const attackerObj = canAttackEnemies[Math.floor(Math.random() * canAttackEnemies.length)];
    if (attackerObj) {
      const defender =
        attackerObj.defenders[Math.floor(Math.random() * attackerObj.defenders.length)];
      this.attackTheEnemy(attackerObj.attacker, defender);
    } else {
      // –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å, —Ç–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ–º –ª—é–±–æ–≥–æ –∏ —Ö–æ–¥–∏–º –∏–º
      const enemyForStep = arrayOfEnemies[Math.floor(Math.random() * arrayOfEnemies.length)];
      const valCells = isStepPossible(
        enemyForStep.position,
        0,
        enemyForStep.character.step,
        this.gamePlay.boardSize
      ).validCells;
      const validCellsForStep = valCells.filter((index) => {
        const positions = [...this.players].map((char) => char.position);
        return !positions.includes(index);
      });

      this.makeStep(
        enemyForStep,
        validCellsForStep[Math.floor(Math.random() * validCellsForStep.length)]
      );
    }
  }

  // —Ñ—É–Ω–∫—Ü–∏—è, –¥–µ–ª–∞—é—â–∞—è —à–∞–≥ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –∏–Ω–¥–µ–∫—Å —è—á–µ–π–∫–∏, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è
  makeStep(char, index) {
    this.players = [...this.players].filter((el) => el !== char);
    char.position = index;
    this.players.push(char);
    this.endOfTurn();
  }

  // —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
  nextLevel() {
    this.currentLevel += 1;
    if (this.currentLevel < 5) {
      GamePlay.showMessage('START NEW LEVEL!');
    } else {
      this.endOfGame();
      GamePlay.showMessage('YOU WIN THE GAME!');
      return;
    }
    this.gamePlay.drawUi(themes[this.currentLevel - 1]);
    this.scores += this.players.reduce((acc, prev) => acc + prev.character.health, 0);
    const levelElement = document.getElementById('level');
    const scoresElement = document.getElementById('scores');
    const recordElement = document.getElementById('record');
    levelElement.textContent = this.currentLevel;
    scoresElement.textContent = this.scores;
    this.record = Math.max(this.record, this.scores);
    recordElement.textContent = this.record;
    // –∞–ø–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤ –∂–∏–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    this.players.reduce((acc, prev) => {
      prev.character.levelUp();
      acc.push(prev);
      return acc;
    }, []);
    // —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–æ–º–∞–Ω–¥—É
    const quantityOfNewChars = this.currentLevel > 2 ? 2 : 1;
    const newChars = generateTeam(new Team().userTeam, this.currentLevel - 1, quantityOfNewChars);
    // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –∫–æ–º–∞–Ω–¥ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    let newUserTeam = [...this.players].map((char) => char.character);
    newUserTeam = [...newUserTeam, ...newChars];
    this.userTeamWithPositions = this.generateTeamWithPositions(
      newUserTeam,
      getArrayOfPositions('user', this.gamePlay.boardSize)
    );
    const newComputerTeam = generateTeam(
      new Team().computerTeam,
      this.currentLevel,
      newUserTeam.length
    );
    this.computerTeamWithPositions = this.generateTeamWithPositions(
      this.statesUpForCompChars(newComputerTeam),
      getArrayOfPositions('computer', this.gamePlay.boardSize)
    );
    // –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–µ
    this.players = [...this.userTeamWithPositions, ...this.computerTeamWithPositions];
    this.gamePlay.cells.forEach((cell) =>
      this.gamePlay.deselectCell(this.gamePlay.cells.indexOf(cell))
    );
    this.selectChar = null;
    this.gamePlay.redrawPositions(this.players);
  }

  // —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –µ–≥–æ —É—Ä–æ–≤–Ω—é
  statesUpForCompChars(team) {
    return team.reduce((acc, char) => {
      for (let i = 1; i < char.level; i++) {
        char.statesUp();
      }
      acc.push(char);
      return acc;
    }, []);
  }

  endOfGame() {
    // –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π, —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç –ø–æ–ª–µ
    this.unsubscriber();
    // –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—á–∫–∏ –∏ —Ä–µ–∫–æ—Ä–¥
    this.scores += this.players.reduce((acc, prev) => acc + prev.character.health, 0);
    const scoresElement = document.getElementById('scores');
    scoresElement.textContent = this.scores;
    this.record = Math.max(this.record, this.scores);
    const recordElement = document.getElementById('record');
    recordElement.textContent = this.record;
    // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    this.gamePlay.redrawPositions(this.players);
  }

  onNewGame() {
    // –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫, –æ–±–Ω—É–ª—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    this.unsubscriber();
    this.currentLevel = 1;
    this.scores = 0;
    this.selectChar = null;
    const userTeam = generateTeam(new Team().userTeam, 1, 2);
    const computerTeam = generateTeam(new Team().computerTeam, 1, 2);
    this.userTeamWithPositions = this.generateTeamWithPositions(
      userTeam,
      getArrayOfPositions('user', this.gamePlay.boardSize)
    );
    this.computerTeamWithPositions = this.generateTeamWithPositions(
      computerTeam,
      getArrayOfPositions('computer', this.gamePlay.boardSize)
    );
    this.players = [...this.userTeamWithPositions, ...this.computerTeamWithPositions];
    this.userTurn = true;

    this.gamePlay.drawUi(themes[this.currentLevel - 1]);
    this.gamePlay.redrawPositions(this.players);

    const levelElement = document.getElementById('level');
    const scoresElement = document.getElementById('scores');
    const recordElement = document.getElementById('record');
    levelElement.textContent = this.currentLevel;
    scoresElement.textContent = this.scores;
    this.record = Math.max(this.record, this.scores);
    recordElement.textContent = this.record;
    this.onCellClickSubscriber();
    this.onCellEnterSubscriber();
    this.onCellLeaveSubscriber();
  }

  onSaveGame() {
    const stateObj = {
      players: this.players,
      level: this.currentLevel,
      scores: this.scores,
      record: this.record,
      isUserTurn: this.isUserTurn,
    };
    this.stateService.save(GameState.from(stateObj));
  }

  onLoadGame() {
    const state = GameState.from(this.stateService.load());

    this.currentLevel = state.level;
    this.scores = state.scores;
    this.record = state.record;
    this.players = state.players;
    this.isUserTurn = state.isUserTurn;

    this.players = this.players.reduce((acc, prev) => {
      prev.character.__proto__ = Chatacter.prototype;
      acc.push(prev);
      return acc;
    }, []);

    this.gamePlay.drawUi(themes[this.currentLevel - 1]);
    this.gamePlay.redrawPositions(this.players);

    const levelElement = document.getElementById('level');
    const scoresElement = document.getElementById('scores');
    const recordElement = document.getElementById('record');
    levelElement.textContent = this.currentLevel;
    scoresElement.textContent = this.scores;
    recordElement.textContent = this.record;
  }

  onCellClickSubscriber() {
    this.gamePlay.addCellClickListener(this.onCellClick.bind(this));
  }

  onCellEnterSubscriber() {
    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this));
  }

  onCellLeaveSubscriber() {
    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this));
  }

  onNewGameSubscriber() {
    this.gamePlay.addNewGameListener(this.onNewGame.bind(this));
  }

  onSaveGameSubscriber() {
    this.gamePlay.addSaveGameListener(this.onSaveGame.bind(this));
  }

  onLoadGameSubscriber() {
    this.gamePlay.addLoadGameListener(this.onLoadGame.bind(this));
  }

  unsubscriber() {
    this.gamePlay.unsubscribe();
  }
}
